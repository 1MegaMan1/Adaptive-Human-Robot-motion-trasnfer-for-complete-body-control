#include <ros/ros.h>
#include <ros/console.h>
#include <string>
#include <cstdio>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2_ros/transform_broadcaster.h>
#include <tf2/convert.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseStamped.h>
#include <kinect_v2/BodyJoints.h>
#include <iostream>
#include <tf/transform_datatypes.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <vector>

using namespace std;
#define  M_PI 3.14159265358979323846
#define  base_link 0
#define  Lshoulder 1
#define  Lelbow 2
#define  Lhand 3
#define  Rshoulder 4
#define  Relbow 5
#define  Rhand 6
#define  Lhip 7
#define  Lknee 8
#define  Lankle 9
#define  Lfoot 10
#define  Rhip 11
#define  Rknee 12
#define  Rankle 13
#define  Rfoot 14
#define  shoulder_spine 15

ros::Publisher joint_pub;
double length_of_v            (vector<double> const& v);
double dot_product            (vector<double> const& v, vector<double> const& v1);
double find_angle             (vector<double> const& v, vector<double> const& v1);
vector<double> multi_m_vector (vector<double> const& v, double n);
vector<double> add_m_vector   (vector<double> const& v, double n);
vector<double> divide_vector  (vector<double> const& v, double n);
vector<double> subtract_vector(vector<double> const& v, vector<double> const& v1);
vector<double> get_pitch      (vector<double> const& v, vector<double> const &v1);
vector<double> cross_product  (vector<double> const& v, vector<double> const& v1);
vector<double> add_two_vector (vector<double> const& v, vector<double> const& v1);
vector<double> find_yaw_hip_v (const kinect_v2::BodyJoints &user_i, int j1);
vector<double> find_vector    (const kinect_v2::BodyJoints &user_i, int j1, int j2);
vector<double> find_leg_normal(const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3);
const double get_joint_roll   (const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3);
const double get_joint_pitch  (const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3, int j4);
const double get_hip_pitch    (const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3, int j4);
const double get_hip_roll     (const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3, int j4);
const double get_hip_yaw_pitch(const kinect_v2::BodyJoints &user_i, int j1, int j2, int j3, int j4);
void publishTransform         (const kinect_v2::BodyJoints &user_i, int user_id, int j);
const string get_key_name_tf  (int n);
const string get_key_name_model(int n);
const int find_alt_joint(int n);

void callback_0(const kinect_v2::BodyJoints &user_0)
{
  if (user_0.tracked == "YES")
    {
      publishTransform(user_0, 0, 0);
    }
}

void callback_1(const kinect_v2::BodyJoints &user_1)
{
  if (user_1.tracked == "YES")
    {
      publishTransform(user_1, 1, 0);
    }
}

void callback_2(const kinect_v2::BodyJoints &user_2)
{
  if (user_2.tracked == "YES")
    {
      publishTransform(user_2, 2, 0);
    }
}

void callback_3(const kinect_v2::BodyJoints &user_3)
{
  if (user_3.tracked == "YES")
    {
      	publishTransform(user_3, 3, 0);
    }
}

void callback_4(const kinect_v2::BodyJoints &user_4)
{
  if (user_4.tracked == "YES")
  {
      publishTransform(user_4, 4, 0);
  }
}

void callback_5(const kinect_v2::BodyJoints &user_5)
{
  if (user_5.tracked == "YES")
  {
      publishTransform(user_5, 5, 0);
  }
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "skeleton_tracking");
	ros::NodeHandle n;
	ros::Subscriber sub_0 = n.subscribe("user_0", 1, &callback_0);
	ros::Subscriber sub_1 = n.subscribe("user_1", 1, &callback_1);
	ros::Subscriber sub_2 = n.subscribe("user_2", 1, &callback_2);
	ros::Subscriber sub_3 = n.subscribe("user_3", 1, &callback_3);
	ros::Subscriber sub_4 = n.subscribe("user_4", 1, &callback_4);
	ros::Subscriber sub_5 = n.subscribe("user_5", 1, &callback_5);
		if (ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug)) { // Change the level to fit your needs
	  ros::console::notifyLoggerLevelsChanged();
		}
	
	joint_pub = n.advertise<sensor_msgs::JointState>("kin_joint_states", 10);
	ros::spin();
	return 0;
}

void publishTransform(const kinect_v2::BodyJoints &user_i, int user_id, int joint_id)//-------------------------------
{
      	geometry_msgs::TransformStamped transformStamped;
	static sensor_msgs::JointState joint_state;
       	static tf2_ros::TransformBroadcaster br;
	vector<double> Lhip_v(3), Rhip_v(3), normal_of_Lleg_v(3), normal_of_Rleg_v(3), rotation_of_Lleg_norm_v(3), rotation_of_Rleg_norm_v(3);
       	
	for (int joint_id = 0; joint_id < 16; ++joint_id)
   {
     if( joint_id == Lhand )
       {
      	    transformStamped.header.stamp = ros::Time::now();
	    transformStamped.header.frame_id = "torso";
	    transformStamped.child_frame_id = get_key_name_tf(joint_id); //	  + "_" + to_string(user_id);	   
	    Lhip_v                  = find_yaw_hip_v(user_i, Lhip);
	    normal_of_Lleg_v        = find_leg_normal(user_i, Lknee, Lankle, Lfoot);
	    rotation_of_Lleg_norm_v = get_pitch(normal_of_Lleg_v,Lhip_v);
	    transformStamped.transform.translation.x = user_i.joints[Lhip].position.x-rotation_of_Lleg_norm_v[0];
	    transformStamped.transform.translation.y = user_i.joints[Lhip].position.y-rotation_of_Lleg_norm_v[1];
	    transformStamped.transform.translation.z = user_i.joints[Lhip].position.z-rotation_of_Lleg_norm_v[2];
	
	    transformStamped.transform.rotation.w = 1;
	    transformStamped.transform.rotation.x = 0;
	    transformStamped.transform.rotation.y = 0;
	    transformStamped.transform.rotation.z = 0;

       }
     else if (joint_id == Rhand)
       {
       	    transformStamped.header.stamp = ros::Time::now();
	    transformStamped.header.frame_id = "torso";
	    transformStamped.child_frame_id = get_key_name_tf(joint_id); //	  + "_" + to_string(user_id);
	    Rhip_v                  = rotation_of_Rleg_norm_v                  = find_yaw_hip_v(user_i, Rhip);
	    normal_of_Rleg_v        = find_leg_normal(user_i, Rknee, Rankle, Rfoot);
	    rotation_of_Rleg_norm_v = get_pitch(normal_of_Rleg_v,Rhip_v);
	    transformStamped.transform.translation.x =  user_i.joints[Rhip].position.x-rotation_of_Rleg_norm_v[0];
	    transformStamped.transform.translation.y =  user_i.joints[Rhip].position.y-rotation_of_Rleg_norm_v[1];
	    transformStamped.transform.translation.z =  user_i.joints[Rhip].position.z-rotation_of_Rleg_norm_v[2];
	
	    transformStamped.transform.rotation.w = 1;
	    transformStamped.transform.rotation.x = 0;
	    transformStamped.transform.rotation.y = 0;
	    transformStamped.transform.rotation.z = 0;

       }
     else
       {
      	    transformStamped.header.stamp = ros::Time::now();
	    transformStamped.header.frame_id = "torso";
	    transformStamped.child_frame_id = get_key_name_tf(joint_id); //	  + "_" + to_string(user_id);

	    transformStamped.transform.translation.x = user_i.joints[joint_id].position.x;
	    transformStamped.transform.translation.y = user_i.joints[joint_id].position.y;
	    transformStamped.transform.translation.z = user_i.joints[joint_id].position.z;
	
	    transformStamped.transform.rotation.w = user_i.joints[joint_id].orientation.w;
	    transformStamped.transform.rotation.x = user_i.joints[joint_id].orientation.x;
	    transformStamped.transform.rotation.y = user_i.joints[joint_id].orientation.y;
	    transformStamped.transform.rotation.z = user_i.joints[joint_id].orientation.z;
       }

       	br.sendTransform(transformStamped);
   }
 
   joint_state.name.resize(2);
   joint_state.position.resize(2);
   joint_state.header.stamp = ros::Time::now();
   joint_state.header.frame_id = "torso";
   /*
   joint_state.name[0] = get_key_name_model(23);//RElbowRoll
   joint_state.position[0] = get_joint_roll(user_i, Rshoulder, Relbow, Rhand);

   joint_state.name[1] = get_key_name_model(17);//LElbowRoll
   joint_state.position[1] = get_joint_roll(user_i, Lshoulder, Lelbow, Lhand);
  
   joint_state.name[2] = get_key_name_model(21);//RShoulderRoll
   joint_state.position[2] = get_joint_roll(user_i, shoulder_spine, Rshoulder,Relbow); 

   joint_state.name[3] = get_key_name_model(15);//LShoulderRoll
   joint_state.position[3] = get_joint_roll(user_i, shoulder_spine, Lshoulder, Lelbow);
   
   joint_state.name[4] = get_key_name_model(14);//LshoulderPitch
   joint_state.position[4] = get_joint_pitch(user_i, base_link, shoulder_spine, Lshoulder, Lelbow);
   
   joint_state.name[5] = get_key_name_model(20);//RshoulderPitch
   joint_state.position[5] = get_joint_pitch(user_i, base_link, shoulder_spine, Rshoulder, Relbow);                                                                                                           */                                                                                                                                         
   // joint_state.name[2] = get_key_name_model(5);//Lknee
   // joint_state.position[2] = get_joint_roll(user_i, Lhip, Lknee, Lankle);
   
   // joint_state.name[3] = get_key_name_model(11);//Rknee
   //  joint_state.position[3] = get_joint_roll(user_i, Rhip, Rknee, Rankle);

     joint_state.name[0] = get_key_name_model(3);//LhipRoll
     joint_state.position[0] = get_hip_roll(user_i, Lhip, Lankle, Lknee, Lfoot);

    joint_state.name[1] = get_key_name_model(9);//RhipRoll
    joint_state.position[1] = get_hip_roll(user_i, Rhip, Rankle, Rknee, Rfoot);

   //  joint_state.name[0] = get_key_name_model(4);//LhipPitch
   //  joint_state.position[0] = get_hip_pitch(user_i, Lhip, Lankle, Lknee, Lfoot);
 
 
   //  joint_state.name[1] = get_key_name_model(10);//RhipPitch
   //  joint_state.position[1] = get_hip_pitch(user_i, Rhip, Rankle, Rknee, Rfoot);
 
    

   //  joint_state.name[12] = get_key_name_model(1);//HeadPitch
   // joint_state.position[12] = get_joint_roll(user_i, shoulder_spine, neck, head);

   // joint_state.name[13] = get_key_name_model(0);//HeadYaw
   //  joint_state.position[13] = get_joint_pitch(user_i, base_link, shoulder_spine, neck, head);
   
   //  joint_state.name[13] = get_key_name_model(2);//LYawPitchhip
   // joint_state.position[13] = get_joint_pitch(user_i, base_link, shoulder_spine, Lhip, Lknee);

   //  joint_state.name[14] = get_key_name_model(8);//RYawPitchhip
   //  joint_state.position[14] = get_joint_pitch(user_i, base_link, shoulder_spine, Rhip, Rknee);

   

   joint_pub.publish(joint_state);
}
const double get_joint_roll(const kinect_v2::BodyJoints &user_i, int inner_joint,int middle_joint,int outer_joint)//---------------------------------
{
  vector<double>  v1(3), v2(3);
   double side = 0.0, dir = 1.0;

   

   if((user_i.joints[outer_joint].position.z!=0.0) && (user_i.joints[middle_joint].position.z!=0.0) && (user_i.joints[inner_joint].position.z!=0.0))
   {
     v1 = find_vector(user_i,outer_joint, middle_joint);
     v2 = find_vector(user_i,middle_joint, inner_joint);    
   }

   switch (middle_joint)
     {
     case Lshoulder:
        side = -M_PI/2;
	dir = -1.0;
	break;
     case Rshoulder:
        side = -M_PI/2;
	dir = 1.0;
	break;
     case Lelbow:
        side = 0.0;
	dir = -1.0;
	break;
     case Relbow:
        side = 0.0;
	dir = 1.0;
	break;
     case Lknee:
        side = 0.0;
	dir = 1.0;
	break;
     case Rknee:
        side = 0.0;
	dir = 1.0;
	break;
     default:
       ROS_ERROR("Illegal joint");
       return 0.0;
     }
    return dir*(find_angle(v1,v2)+side);
 }

const double get_joint_pitch(const kinect_v2::BodyJoints &user_i, int base,int spine,int ball, int hinge )//--------------------------
{
  double side= 0.0, dir =1.0;
  vector<double> v4(3), v1(3), v2(3),v3(3);
  
     v1 = find_vector(user_i, ball, spine);
     v2 = find_vector(user_i, hinge, ball);
     v3 = find_vector(user_i, base, spine);
      switch (ball)
     {
     case Lshoulder:
	dir = -1.0;
       side = M_PI/2;
       break;
     case Rshoulder:
       dir = -1.0;
       side = M_PI/2;
       break;
     default:
       side = 0;
       break;
     }
     v4 = get_pitch(v1,v2);
      
      return (dir*find_angle(v4,v3)+side);

}

const double get_hip_roll(const kinect_v2::BodyJoints &user_i, int hip, int ankle, int knee, int foot)//----------------------------------------
{
  double  side = M_PI/4, dir = -1.0;
  vector<double> yaw_hip_v(3), normal_of_leg_v(3);

     normal_of_leg_v = find_leg_normal(user_i, knee, ankle, foot);
     yaw_hip_v       = find_yaw_hip_v(user_i, hip);
    if( foot == Lfoot)
    {
      side = 3*M_PI/4;
     dir = -1.0;
    }

     return((dir*find_angle(normal_of_leg_v,yaw_hip_v)+side));
}

const double get_hip_pitch(const kinect_v2::BodyJoints &user_i, int hip, int ankle, int knee, int foot)//----------------------------------------
{
  double side = 0.0, dir = -1.0;
  vector<double> yaw_hip_v(3), normal_of_leg_v(3),rotation_of_leg_norm_v(3), hip_to_knee_v(3);
  int alt_joint = 0;
  alt_joint = find_alt_joint(hip);
     yaw_hip_v              = find_yaw_hip_v(user_i, hip);
     normal_of_leg_v       = find_leg_normal(user_i, knee, ankle, foot);
     rotation_of_leg_norm_v = get_pitch(normal_of_leg_v,yaw_hip_v);
     hip_to_knee_v          = find_vector(user_i,hip, knee);
       return((dir*find_angle(rotation_of_leg_norm_v,hip_to_knee_v)+side));
}

const double get_hip_yaw_pitch(const kinect_v2::BodyJoints &user_i, int hip, int knee, int ankle, int foot)//-----------------------------------------------
{
  vector<double> ref_hip_rotation_v(3), rot_of_yaw_pitch_hip_v(3), hip_yaw_pitch_v(3),back_v(3);
  double dir = 1.0, side = 0.0;;
  
  hip_yaw_pitch_v = find_yaw_hip_v(user_i, hip);
  back_v = find_vector(user_i,shoulder_spine,base_link);
  rot_of_yaw_pitch_hip_v = get_pitch(hip_yaw_pitch_v,back_v);
  ref_hip_rotation_v = cross_product(back_v, hip_yaw_pitch_v);
  
  return(dir*find_angle(ref_hip_rotation_v, rot_of_yaw_pitch_hip_v)+side);
}


double find_angle(vector<double> const& v1, vector<double> const& v2)//---------------------------------------------------------------------------------------
{
      double v1m = length_of_v(v1);
      double v2m = length_of_v(v2);
      double result = 0;
     result = dot_product(v1,v2);
     if((v1m!=0.0) && (v2m!=0.0))
     {
	return ( acos( result / ( v1m* v2m) ) );
     }
     else
     {
	  ROS_ERROR("Illegal frames");
	  return 0.0;
     }
}

vector<double> get_pitch(vector<double> const& v1, vector<double> const & v2)//------------------------------------------------------------------------------
{
  double v1m, temp;
  vector<double> v5(3), v4(3), v3(3);
 
  //( ( V2 - ( V1 / v1m . V2) * V1 / v1m ) )
  //------------------------------------------
  //|(( V2 - ( V1 / v1m . V2) * V1 / v1m ) )
  
     v1m = length_of_v(v1);
     v3 = divide_vector(v1,v1m);  // v1 / v1m = v3
     temp = dot_product(v2,v3);// V3 . V2  = temp
     v4 = multi_m_vector(v3, temp);

     //  ( ( V1/v1m . V2 ) * V1 / v1m ) = V4
     
     return(subtract_vector(v2,v4));
}

vector<double> find_yaw_hip_v(const kinect_v2::BodyJoints &user_i, int hip)
{
  vector<double> vb(3),vh(3),vh1(3),vb1(3),vb2(3);
  double vhm, vbm;
    int alt_hip = 0;
    alt_hip = find_alt_joint(hip);   
     vb =   find_vector(user_i, shoulder_spine, base_link);
     vh =   find_vector(user_i, hip, alt_hip);
     vhm =  length_of_v(vh);
     vb1 =  get_pitch(vh,vb);
     vbm = length_of_v(vb1);
     vb2 =  divide_vector(vb1,vbm); 
     vh1 =   divide_vector(vh, vhm);
     return(subtract_vector(vb2,vh1));
}

vector<double> find_vector(const kinect_v2::BodyJoints &user_i, int j1, int j2)
{
  vector<double> v(3);
     v[0] = user_i.joints[j1].position.x - user_i.joints[j2].position.x;
     v[1] = user_i.joints[j1].position.y - user_i.joints[j2].position.y;
     v[2] = user_i.joints[j1].position.z - user_i.joints[j2].position.z;
     return v;
}

vector<double> find_leg_normal(const kinect_v2::BodyJoints &user_i, int knee, int ankle, int foot)
{
  vector<double> v1(3),v2(3),v3(3);
  v1 = find_vector(user_i,ankle, knee);
  v2 = find_vector(user_i,ankle, foot);
  v3 = cross_product(v1,v2);    
  return v3;    
}

double length_of_v(vector<double> const& v1)
{
  return( sqrt(v1[0]*v1[0]+v1[1]*v1[1]+v1[2]*v1[2]));
}

vector<double> cross_product(vector<double> const& v1,vector<double> const& v2)//---------------------------------------------------------------------------------
{
  vector<double> p(3);
  p[0] = v1[1] * v2[2] - v1[2] * v2[1];
  p[1] = v1[2] * v2[0] - v1[0] * v2[2];
  p[2] = v1[0] * v2[1] - v1[1] * v2[0];
  return p;
}

vector<double> multi_m_vector(vector<double> const& v, double n)
{
  vector<double> v1(3);
  v1[0] = v[0]*n;
  v1[1] = v[1]*n;
  v1[2] = v[2]*n;
  return v1;
}
vector<double> add_m_vector(vector<double> const& v, double n)
{
  vector<double> v1(3);
  v1[0] = v[0]+n;
  v1[1] = v[1]+n;
  v1[2] = v[2]+n;
  return v1;
}
vector<double> add_two_vector(vector<double> const& v, vector<double> const& v1)
{
  vector<double> v2(3);
  v2[0] = v[0]+v1[0];
  v2[1] = v[1]+v1[1];
  v2[2] = v[2]+v1[2];
  return v2;
}

vector<double> divide_vector(vector<double> const& v, double n)
{
  vector<double> v1(3);
  v1[0] = v[0]/n;
  v1[1] = v[1]/n;
  v1[2] = v[2]/n;
  return v1;
}

vector<double> subtract_vector(vector<double> const& v, vector<double> const& v1)
{
  vector<double> v2(3);
  v2[0] = v[0] - v1[0];
  v2[1] = v[1] - v1[1];
  v2[2] = v[2] - v1[2];
  return v2;
}

const int find_alt_joint(int joint)
{
  switch (joint)
    {
    case Lshoulder:return Rshoulder; break;
    case Rshoulder:return Lshoulder; break;
    case Lankle:return Rankle; break;
    case Rankle:return Lankle; break;      
    case Lknee:return Rknee; break;      
    case Rknee:return Lknee; break;
    case Lhip:return Rhip; break;
    case Rhip:return Lhip; break;
    case Lelbow:return Relbow; break;
    case Relbow:return Lelbow; break;
    case Lfoot:return Rfoot; break;
    case Rfoot:return Lfoot; break;      
    }
}
double dot_product(vector<double> const& v, vector<double> const& v1)
{ 
  return (v[0]*v1[0] +v[1]*v1[1] +v[2]*v1[2]);
}

const string get_key_name_tf(int n)
{
	switch (n)
	{
	case	base_link:return           "k_base_link"; break;
		  //	case	1:return	"k_neck"; break;
		  //	case	2:return	"k_Head"; break;
	case	Lshoulder:return           "k_LShoulder"; break;
	case	Lelbow:return	           "k_Lelbow"; break;
      	case	Lhand:return	           "k_l_gripper"; break;
	case	Rshoulder:return           "k_RShoulder"; break;
	case	Relbow:return	           "k_Relbow"; break;
      	case	Rhand:return	           "k_r_gripper"; break;
	case	Lhip:return	           "k_LHip"; break;
	case    Lfoot:return               "k_L_foot"; break;    		  
	case	Lknee:return	           "k_left_knee"; break;
	case	Lankle:return	           "k_l_ankle"; break;
	case	Rhip:return	           "k_RHip"; break;
	case	Rknee:return	           "k_right_knee"; break;
	case	Rankle:return	           "k_r_ankle"; break;
	case    Rfoot:return               "k_R_foot"; break;    
	case	shoulder_spine:return	   "k_shoulder_spine"; break;
	}
}
const string get_key_name_model(int n)
{
	switch (n)
	{
		case	0:return	"HeadYaw"; break;
		case	1:return	"HeadPitch"; break;
		case	2:return	"LHipYawPitch"; break;
		case	3:return	"LHipRoll"; break;
		case	4:return	"LHipPitch"; break;
		case	5:return	"LKneePitch"; break;
		case	6:return	"LAnklePitch"; break;
		case	7:return	"LAnkleRoll"; break;
		case	8:return	"RHipYawPitch"; break;
		case	9:return	"RHipRoll"; break;
		case	10:return	"RHipPitch"; break;
		case	11:return	"RKneePitch"; break;
		case	12:return	"RAnklePitch"; break;
		case	13:return	"RAnkleRoll"; break;
		case	14:return	"LShoulderPitch"; break;
		case	15:return	"LShoulderRoll"; break;
		case	16:return	"LElbowYaw"; break;
		case	17:return	"LElbowRoll"; break;
		case	18:return	"LWristYaw"; break;
		case	19:return	"LHand"; break;
		case	20:return	"RShoulderPitch"; break;
		case	21:return	"RShoulderRoll"; break;
		case	22:return	"RElbowYaw"; break;
		case	23:return	"RElbowRoll"; break;
		case	24:return	"RWristYaw"; break;
		case	25:return	"RHand"; break;
		case	26:return	"RFinger23"; break;
		case	27:return	"RFinger13"; break;
		case	28:return	"RFinger12"; break;
		case	29:return	"LFinger21"; break;
		case	30:return	"LFinger13"; break;
		case	31:return	"LFinger11"; break;
		case	32:return	"RFinger22"; break;
		case	33:return	"LFinger22"; break;
		case	34:return	"RFinger21"; break;
		case	35:return	"LFinger12"; break;
		case	36:return	"RFinger11"; break;
		case	37:return	"LFinger23"; break;
		case	38:return	"LThumb1"; break;
		case	39:return	"RThumb1"; break;
		case	40:return	"RThumb2"; break;
		case	41:return	"LThumb2"; break;
	}
}
