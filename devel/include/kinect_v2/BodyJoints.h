// Generated by gencpp from file kinect_v2/BodyJoints.msg
// DO NOT EDIT!


#ifndef KINECT_V2_MESSAGE_BODYJOINTS_H
#define KINECT_V2_MESSAGE_BODYJOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace kinect_v2
{
template <class ContainerAllocator>
struct BodyJoints_
{
  typedef BodyJoints_<ContainerAllocator> Type;

  BodyJoints_()
    : user_id(0)
    , tracked()
    , joints()  {
    }
  BodyJoints_(const ContainerAllocator& _alloc)
    : user_id(0)
    , tracked(_alloc)
    , joints()  {
  (void)_alloc;
      joints.assign( ::geometry_msgs::Pose_<ContainerAllocator> (_alloc));
  }



   typedef int32_t _user_id_type;
  _user_id_type user_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tracked_type;
  _tracked_type tracked;

   typedef boost::array< ::geometry_msgs::Pose_<ContainerAllocator> , 16>  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::kinect_v2::BodyJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_v2::BodyJoints_<ContainerAllocator> const> ConstPtr;

}; // struct BodyJoints_

typedef ::kinect_v2::BodyJoints_<std::allocator<void> > BodyJoints;

typedef boost::shared_ptr< ::kinect_v2::BodyJoints > BodyJointsPtr;
typedef boost::shared_ptr< ::kinect_v2::BodyJoints const> BodyJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinect_v2::BodyJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinect_v2::BodyJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kinect_v2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'kinect_v2': ['/home/magni/catkin_ws/src/kinect_v2/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kinect_v2::BodyJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinect_v2::BodyJoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_v2::BodyJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_v2::BodyJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_v2::BodyJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_v2::BodyJoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinect_v2::BodyJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61535990ee807ee844649627b51297c2";
  }

  static const char* value(const ::kinect_v2::BodyJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61535990ee807ee8ULL;
  static const uint64_t static_value2 = 0x44649627b51297c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_v2::BodyJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinect_v2/BodyJoints";
  }

  static const char* value(const ::kinect_v2::BodyJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinect_v2::BodyJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 user_id\n\
string tracked\n\
geometry_msgs/Pose[16] joints\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::kinect_v2::BodyJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinect_v2::BodyJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_id);
      stream.next(m.tracked);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_v2::BodyJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinect_v2::BodyJoints_<ContainerAllocator>& v)
  {
    s << indent << "user_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "tracked: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tracked);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINECT_V2_MESSAGE_BODYJOINTS_H
